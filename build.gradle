group 'org'

apply plugin: 'scala'
apply plugin: 'maven-publish'
apply plugin: 'distribution'

sourceCompatibility = 1.8

buildscript {
    repositories {
        mavenCantral()
    }

}

repositories {
    mavenCantral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

configurations {
    spark {
        extendsFrom runtime

        exclude group: 'org.scala-lang'
        exclude group: 'org.scala-lang.modules'
        exclude module: 'spark-core_2.11'
        exclude module: 'spark-sql_2.11'
    }
}


dependencies {
    compile fileTree("libs") {
        include '*.jar'
    }


    compile(group: 'org.scala-lang', name: 'scala-library', version: '2.11.12')
    compile(group: 'org.scala-lang', name: 'scala-reflect', version: '2.11.12')
    compile(group: 'org.scala-lang', name: 'scala-compiler', version: '2.11.12')
    compile(group: 'org.scala-lang.modules', name: 'scala-xml_2.11', version: "1.1.1")

    compile(group: 'com.typesafe', name: 'config', version: '1.3.3')


    compile(group: 'org.apache.spark', name: 'spark-core_2.11', version: '2.3.0')
    compile(group: 'org.apache.spark', name: 'spark-sql_2.11', version: '2.3.0')

      

}

task(sparkJar, type: Jar) {
    classifier = 'spark'

    manifest {
        attributes (
                'Main-Class': 'org.Main',
        )
    }
    from { configurations.spark.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

}


configurations {
    assembly
    compile.extendsFrom assembly
}

configurations {
    provided
    compile.extendsFrom provided
}

distributions {
    main {
        baseName = project.name
        contents {
            into('') {
                from sparkJar.outputs.files
            }
        }
    }
}






